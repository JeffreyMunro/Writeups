In this challenge The help desk has received a few calls from different IT admins regarding the attached program.They say that they've been using this program with no problems until recently. Now, it's crashing randomly and popping up blue windows when its run. The objective is to perform basic static and basic dynamic analysis on the malware sample and to extract the facts about the malwares behavior.

I have written the challenge questions below, and will answer each question to the best of my ability.

The tools I will utilize in this challenge will be the following.

Tools for Static Analysis: File hashes, VirusTotal, FLOSS, PEStudio and PEView.

Tools for Dynamic Analysis: Wireshark, Inetsim, Netcat, TCPView and Procmon.

Challenge Questions:


Basic Static Analysis

The first step of Static Analysis will be getting the SHA356 hash of the sample that has given to me. So, the first thing I will do is grab the password protected file, using the password "infected. To receive the SHA256 hash I will open Cmder, and enter the command "sha256sum.exe putty.exe" which will result in receiving the SHA256 hash of the putty.exe file of "0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83" 

Alternatively, I could have also went into my Flare folder, and went into the utilities and utilized pestudio to grab the SHA256. Since pestudio gives a lot of value, such as md5, sha1 and sha256 hashes. I am also given the file-type which is an executable and that the file is 32-bit. 


Entering the SHA256 hash into VirusTotal results from 50 security vendors. 

The next step I want to do is to pull strings from this binary, so in cmder i did the command "FLOSS.EXE putty.exe > putty.txt"

Which, automatically detecs, extracts and decodes strings in pe files. Unfortunately, there was not really any information I could do with this. 

Using pestudio, I have come to the conclusion that I do not believe the binary ispacked, simply by comparing the raw-size and virtual-size being nearly identical.

I followed up with looking into pestudio, there are a lot of strings being pulled, and 160 strings are blacklisted. Overall, this seems like there is too much data and I am not sure what I am looking for. I believe my time would be better utilizing Dynamic analysis.




Basic Dynamic Analysis


In this part of the challenge I have moved towards some basic dynamic analysis. I will be utilizing multiple tools in this analysis.

Before I begin the detonation of the executable file; I will turn on my remnux machine to utilize wireshark for packet capture and after the first detonation, I will turn on inetsim to see if there are any notable occurances with and without the internet, turn on procmon and filter for any processes that contain "putty.exe", and finally use TCPView.

After the first initial detonation we have a blue window popup and normal putty. Having TCPView opened briefly highlights that powershell was used with a SYN sent on local port 1028 going to remote port 8443 which is https and the callback protocol.

Another method I could use is procmon. After I can have the PID from filtering on procmon for processes that contained "putty.exe", I can set a filter on for "Parent PID" which in this case will be 2848, and see any child proccesses. Which in this confirms that powershell.exe was the brief blue screen pop-up.

Following this process in procmon, I can see the "Process Start" operation of powershell, followed by an command line execution . It is a large message, but expanding you can see it is using a Gzip string which is commonly used with compression and see "Frombase64string", which I can grab the string and decode it by doing to remnux and entering the command "echo "(the base64string)" | base 64 -d

Note: at this point I was not sure on what to do as I was not sure on the output, so through some searching I learned that I am supposed to redirect this to a file. Which makes sense because it is a compressed gzip string. So I followed up with the command in my remnux machine "echo "(the base64string)" | base 64 -d > out to output it into a file and then extracted the file. This gives you the fully decompressed payload in plaintext.

From that I go into wireshark and filter for dns queries and see the information of the packets and the queried destination was bonus2.corporatebonusapplication.local.  


How can you use host-based telemetry to identify the DNS record, port, and protocol?

In procmon, I can filter by the name of the binary and adding a filter for operations that contain TCP, but as stated earlier, I was a brief pop-up in TCPview that also provided the information. 

Attempt to get the binary to initiate a shell on the localhost. Does a shell spawn? What is needed for a shell to spawn?

To do this you do the command nano C:\Windows\System32\drivers\etc\hosts

Once you are in, at the bottom of the page enter 127.0.0.1 and the domain the dns queries were sent to. 

Although, the shell doe not spawn without a proper TLS handshake, so using ncat listening will not initiate the shell. The syntax of the powershell reverse shell requires TLS to complete the network transaction so you cannot connect the binary unles you can provide a valid SSL certificate.(solved with help) 